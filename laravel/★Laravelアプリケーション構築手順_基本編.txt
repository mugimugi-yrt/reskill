０．事前準備
    ・XAMPPのインストール
    ・XAMPP内、MySQLの起動
    ・Composerのインストール
    ・Laravelの導入と環境変数の設定

*********
【基本編】
*********
１．新規Laravelアプリケーションの作成
    ・PowerShell起動
    ・作業領域に移動
    　  cd C:\Users\ユーザ名\Desktop        ←任意の場所でOK
    ・アプリケーション格納用のフォルダ作成
        mkdir フォルダ名（任意の名前）
    ・作成したフォルダに移動
        cd フォルダ名
    ・Laravelアプリケーション（Laravelバージョン9）の作成
        composer create-project laravel/laravel アプリケーション名 "9.*" --prefer-dist
    ・自動作成されたアプリケーション名のフォルダに移動
        cd アプリケーション名
    ・開発サーバの起動とブラウザアクセス
        php artisan serve
        ブラウザにて http://localhost:8000
        ※終了する際は Ctrl + C

２．データベースの作成【MySQL使用の場合】
    ・PowerShell起動
    ・MySQLログイン
        cd C:\xampp\mysql\bin	←MySQLコマンドの実行ファイル格納先へ移動
        .\mysql -u root		←実行権限がないため「.\」を冒頭に付ける
    ・SQLコマンドによるデータベース新規作成と確認
        CREATE DATABASE データベース名;
        SHOW DATABASES;
    ・MySQLログアウト
        quit;

３．データベースへの接続設定
    （VS Codeにてワークスペースを開いておく）
    ・アプリケーションフォルダ内 .envファイルを開いて編集
    　  --------------------------
        DB_DATABASE=データベース名
        --------------------------
    
４．モデルの作成
    ・PowerShell起動
    ・php artisan make:model モデル名

５．データベース内にテーブル作成（マイグレーション機能）
    （４の手順のPowerShellにて）
    ・テーブル作成の準備（マイグレーションファイルの作成）
        php artisan make:migration create_テーブル名_table --create=テーブル名
    ・作成されたファイルを確認
        database/migrations/内
    ・テーブル定義の追記
        -----------------------------
        $table->データ型('カラム名');
        -----------------------------
    ・データベース操作（マイグレーションの実行）
        php artisan migrate
        ※テーブル作成に失敗した時などマイグレーションをやり直す場合：php artisan migrate:rollback
    ・テーブル確認（MySQLにログインし、テーブル構造を確認）
        DESC データベース名.テーブル名;　（または、use データベース名; desc テーブル名;）

６．対話型実行環境tinkerを利用したモデル操作
    （５の手順のPowerShellにて）
    ・tinkerの起動
        php artisan tinker
    ・モデル内のレコード全件取得
        モデル名::all()
    ・インスタンス生成
        $インスタンス名 = new モデル名（クラス名）  ←インスタンス名はレコード毎に生成
    ・カラムへの値格納
        $インスタンス名->カラム名 = 値              ←文字列や日付は""で囲む
        $インスタンス名->カラム名 = 値
        　〃 （必要に応じて同様に）
        ※同じインスタンス名の同じカラム名を指定した場合は更新となる
    ・データ保存
        $インスタンス名->save()
    ・データ確認
        モデル名::all()
        ※特定のレコード取得：$インスタンス名->モデル名::find(ID情報)
        ※特定のレコード削除：モデル名::find(ID情報)->delete
    ・tinker終了
        exit;
    ・テーブル確認（MySQLにログインし、テーブルデータを確認）
        CHARSET cp932;              ←文字化け防止（Shift-JIS拡張文字コードで表示）
        USE データベース名;
        SELECT * FROM テーブル名;

７．コントローラの作成
    ・コントローラの作成（コントローラファイル名：モデル名Controller.php）
        php artisan make:controller モデル名Controller --resource
    ・自動作成されたファイルの確認
        app\Http\Controllers\コントローラ名.php

８. ルーティングの調整
    ・routes/web.php の編集
    　  （使用するコントローラの指定）
        ----------------------------------------
        use App\Http\Controllers\コントローラ名;    ←ルートの定義の際、コントローラ指定記述を簡略化できる
        ----------------------------------------
        （ルートの定義）
        ---------------------------------------------------------------
        Route::get('パス名', [コントローラ名::class, 'メソッド名']); 
        《例》
        Route::get('/', [コントローラ名::class, 'index']);
        Route::get('/テーブル名/{id}', [コントローラ名::class, 'show']); 
        ---------------------------------------------------------------
    ・コントローラファイルの編集
        《一覧ページの場合:indexメソッド内》
        ----------------------------------------------
        $変数名（複数形）= \App\Models\モデル名::all();
        return view('index',['配列名' => $変数名]);         ←変数を配列にセットしてHTMLに渡す
        ----------------------------------------------
        《詳細ページの場合:showメソッド内》
        --------------------------------------------------
        $変数名（単数形）= \App\Models\モデル名::find($id);
        return view('show',['配列名' => $変数名]);          ←変数を配列にセットしてHTMLに渡す
        --------------------------------------------------

９. ビューの作成（テンプレートエンジンBladeの利用）
    resources/views/ビューファイル名.blade.php
    ・該当のビューファイルのHTMLタグ内にディレクティブを含む構文を記述
        《一覧ページの場合：配列データをループ処理》
        -----------------------------------------------
        @foreach($引き渡された変数名 as $変数名)
            {{ $インスタンス名->プロパティ名 }}         ←インスタンス名は変数名、プロパティ名はカラム名
        @endforeach
        -----------------------------------------------
        《詳細ページの場合：配列データをそのまま利用》
        -----------------------------------------------
         {{ $インスタンス名->プロパティ名 }}            ←インスタンス名は引き渡された変数名、プロパティ名はカラム名
        -----------------------------------------------

１０．ブラウザアクセス
        php artisan serve
        ブラウザにて http://localhost:8000
        ※終了する際は Ctrl + C